/* 
Replace this file with your code. Put your source files in this directory and any libraries in the lib folder. 
If your main program should be assembly-language replace this file with main.S instead.

Libraries (other than vendor SDK and gcc libraries) must have .h-files in /lib/[library name]/include/ and .c-files in /lib/[library name]/src/ to be included automatically.
*/
#include "gd32vf103.h"
#include "lcd.h"
#include "delay.h"
#include "gd32v_mpu6500_if.h"


#define GRAPH_HEIGHT    30
#define BITMASK 0xFFFFFFF8

float sqRoot(float nr);
int power(int nr, int n);
int convert_int_to_float(float f);

int main(){
	/* The related data structure for the IMU, contains a vector of x, y, z floats*/
    mpu_vector_t Acc;
    /* for lcd */
    uint16_t line_color;

    float y;

    /* Initialize pins for I2C */
    rcu_periph_clock_enable(RCU_GPIOB);
    rcu_periph_clock_enable(RCU_I2C0);
    gpio_init(GPIOB, GPIO_MODE_AF_OD, GPIO_OSPEED_50MHZ, GPIO_PIN_6 | GPIO_PIN_7);
    /* Initialize the IMU (Notice that MPU6500 is referenced, this is due to the fact that ICM-20600
       ICM-20600 is mostly register compatible with MPU6500, if MPU6500 is used only thing that needs 
       to change is MPU6500_WHO_AM_I_ID from 0x11 to 0x70. */
    mpu6500_install(I2C0);
    
    /* Initialize LCD */
    Lcd_SetType(LCD_INVERTED);
    Lcd_Init();
    LCD_Clear(1);

    while(1){
        // Get accelleration data (Note: Blocking read) puts a force vector with 1G = 4096 into x, y, z directions respectively
        mpu6500_getAccel(&Acc);

        // Scale and Convert Acc.y to positive G values
        y = (-1)*Acc.y / 16384;
        
        // Compare y to the gravitational pull, y is higher then 0.8 G we're in the Green zone
        if(y>=0.8)  {
            LCD_Clear(GREEN);
        } else {
            LCD_Clear(RED);
        }
    }

}

/* Function to get the squareroot of a number nr */
float sqRoot(float nr)
{
    int i = 1, j = 1;
    float x0 = 1.0, xn = 1.0;

    for (i = 1, j = 1; i < nr; i = i * 10, j++)
        if (nr / i == 0)
            i = nr;
    i = i / 10;
    j = j - 1;
    if (j > 1)
        x0 = j * power(10, j / 2);

    for (int a = 1; a <= 10; a++)
    {
        xn = 0.5 * (x0 + (nr / x0));
        x0 = xn;
    }

    return xn;
}

/* Function to get the power n of a number nr */
int power(int nr, int n)
{
    int pow = 1;
    int i;
    for (i = 1; i < n; i++)
        pow = pow * nr;
    return pow;
}

/* Function to convert a float to integer */
int convert_int_to_float ( float f) 
{
    int integer, decimal;
    integer = (int) f;
    if(integer == 0) return
    decimal = (int) (f - integer ) * 10;
    if (decimal >= 5){
        integer++;
    }
    return integer;
}
