#include "gd32vf103.h"
#include "lcd.h"
#include "delay.h"
#include "gd32v_mpu6500_if.h"

int convert_int_to_float(float f);

int main(){
	/* The related data structure for the IMU, contains a vector of x, y, z floats*/
    mpu_vector_t Acc;
    /* for lcd */
    uint16_t line_color;

    float x, y, z;

    /* Initialize pins for I2C */
    rcu_periph_clock_enable(RCU_GPIOB);
    rcu_periph_clock_enable(RCU_I2C0);
    gpio_init(GPIOB, GPIO_MODE_AF_OD, GPIO_OSPEED_50MHZ, GPIO_PIN_6 | GPIO_PIN_7);
    /* Initialize the IMU (Notice that MPU6500 is referenced, this is due to the fact that ICM-20600
       ICM-20600 is mostly register compatible with MPU6500, if MPU6500 is used only thing that needs 
       to change is MPU6500_WHO_AM_I_ID from 0x11 to 0x70. */
    mpu6500_install(I2C0);
    
    /* Initialize LCD */
    Lcd_SetType(LCD_INVERTED);
    Lcd_Init();
    LCD_Clear(1);

    while(1){
        // Get accelleration data (Note: Blocking read) puts a force vector with 1G = 4096 into x, y, z directions respectively
        mpu6500_getAccel(&Acc);

        // Scale to G values
        x = Acc.x / 16384;
        y = Acc.y / 16384;
        z = Acc.z / 16384;

        // Convert to positive
        if (x < 0) {
            x = x*(-1);
        }
        if (z < 0) {
            z = z*(-1);
        }

        // Compare y to the gravitational pull, y is higher then 0.8 G we're in the Green zone
        if(y>=0.8)  {
            LCD_Clear(GREEN);
        } else {
            LCD_Clear(RED);
        }

        // OR......

        // Compare x and z to the gravitational pull, if x is higher then 0.2 G or y is higher then 0.3 G we're in the Red zone
        // if((x>=0.2) || ((z>=0.3)))  {
        //     LCD_Clear(RED);
        // } else {
        //     LCD_Clear(GREEN);
        // }
    }

}

/* Function to convert a float to integer */
int convert_int_to_float ( float f) 
{
    int integer, decimal;
    integer = (int) f;
    if(integer == 0) return
    decimal = (int) (f - integer ) * 10;
    if (decimal >= 5){
        integer++;
    }
    return integer;
}
