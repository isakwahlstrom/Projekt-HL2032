#include "gd32vf103.h"
#include "lcd.h"
#include "delay.h"
#include "gd32v_mpu6500_if.h"

int convert_int_to_float(float f);

int main(){
	/* The related data structure for the IMU, contains a vector of x, y, z floats*/
    mpu_vector_t Acc;
    
    /* Unsigned ints and a float to get the timer value and calulate the passed time */ 
    uint64_t start_mtime, delta_mtime;

    float x, y, z;
    int redReps = 0;
    int period = 7200;
    int on = 0;

    /* Initialize pins for I2C */
    rcu_periph_clock_enable(RCU_GPIOB);
    rcu_periph_clock_enable(RCU_I2C0);
    gpio_init(GPIOB, GPIO_MODE_AF_OD, GPIO_OSPEED_50MHZ, GPIO_PIN_6 | GPIO_PIN_7);
    /* Initialize the IMU (Notice that MPU6500 is referenced, this is due to the fact that ICM-20600
       ICM-20600 is mostly register compatible with MPU6500, if MPU6500 is used only thing that needs 
       to change is MPU6500_WHO_AM_I_ID from 0x11 to 0x70. */
    mpu6500_install(I2C0);
    
    /* Initialize LCD */
    Lcd_SetType(LCD_INVERTED);
    Lcd_Init();
    LCD_Clear(1);
    start_mtime = get_timer_value();

    while(1){
        // Read button pressed (GPIO-pin)
        if(mamma){ // Button is pressed
            if(on == 0)
            {
                on = 1;
            } else {
                on = 0;
            }
        }

        // Change state between break and work
        if(on == 0)
        {
            // On a break
        } else {
            // Get accelleration data (Note: Blocking read) puts a force vector with 1G = 4096 into x, y, z directions respectively
            mpu6500_getAccel(&Acc);

            // Scale to G values
            x = Acc.x / 16384;
            y = Acc.y / 16384;
            z = Acc.z / 16384;

            // Convert to positive
            if (x < 0) {
                x = x*(-1);
            }
            if (z < 0) {
                z = z*(-1);
            }

            // Compare y to the gravitational pull, y is higher then 0.8 G we're in the Green zone
            if(y>=0.8)  {
                LCD_Clear(GREEN);
            } else {
                while(y<0.8)  {
                    LCD_Clear(RED);
                }
                redReps += 1;
            }

            // OR......

            // Compare x and z to the gravitational pull, if x is higher then 0.2 G or y is higher then 0.3 G we're in the Red zone
            // if((x>=0.2) || ((z>=0.3)))  {
                    // while((x<0.2) || ((z<0.3))){
                    //     LCD_Clear(RED);
                    // }
                    // redReps += 1;
            // } else {
            //     LCD_Clear(GREEN);
            // }
        }

        // Give haptic feedback every 10th repetition
        if((redReps%10)==0)
        {
            // Send vibration
            // Or....
            // Light LED
        }
        
        // Count up the time passed in ms
        delta_mtime = get_timer_value() - start_mtime;

        // Send to SD-Card after 2 hours of work
        if (delta_mtime >(SystemCoreClock/4000.0 *period)){
            // Send redReps to SD-Card
        }
    }

}
