/* Including packages and files */ 
#include "gd32vf103.h"
#include "lcd.h"
#include "delay.h"
#include "gd32v_mpu6500_if.h"
#include "gd32vf103v_eval.h"
#include "stdio.h"
#include "string.h"
#include "gd32v_tf_card_if.h"

/* Define global variables */
#define GRAPH_HEIGHT 30
#define EI 1
#define DI 0

#define ARRAYNUM(arr_nanme)      (uint32_t)(sizeof(arr_nanme) / sizeof(*(arr_nanme)))
#define TRANSMIT_SIZE            (ARRAYNUM(txbuffer) - 1)

/* Create variables for transmit & recive */
uint8_t txbuffer[] = "brassi";
//uint8_t rxbuffer;
uint8_t tx_size = TRANSMIT_SIZE;
uint8_t rx_size = TRANSMIT_SIZE;
__IO uint8_t txcount = 0; 
__IO uint16_t rxcount = 0;

/* Create a package struct to transmit (transmit and recive data from gyro/acc, vectors) */
struct Package {
    float aX,aY,aZ,gX,gY,gZ;
};

/* Main function */

int main(void) {
	////////////////////////// Initialize LCD /////////////////////////////////////////
    struct Package package;
    package.aX = 0;
    package.aY = 0;
    package.aZ = 3;
    package.gX = 4;
    package.gY = 5;
    package.gZ = 6;
    
    struct Package package2;
    package2.aX = 7;
    package2.aY = 8;
    package2.aZ = 9;
    package2.gX = 10;
    package2.gY = 11;
    package2.gZ = 12;

    float StartX, StartY;
    float LatestX, LatestY; 
    
    uint8_t * rxbuffer = (uint8_t*)&package2;
    uint8_t * bufferstruct = (uint8_t*)&package;

	Lcd_SetType(LCD_INVERTED);
    Lcd_Init();
    LCD_Clear(1);
    //LCD_DrawPoint(1,1,1);
    delay_1ms(100);
     
	/* int to write T/R characters on LCD screen */
	int x = 0;
	int y = 0;
	int x2 = 80;
	int y2 = 0;

	///////////////////////// Initialize Acc & Gyro ///////////////////////////////////

	/* The related data structure for the IMU, contains a vector of x, y, z floats*/
    mpu_vector_t Acc, vec_temp;
    mpu_vector_t Gyro, vec2_temp;
    /* for lcd */
    uint16_t line_color;

	/* Initialize pins for I2C */
    rcu_periph_clock_enable(RCU_GPIOB);
    rcu_periph_clock_enable(RCU_I2C0);
    gpio_init(GPIOB, GPIO_MODE_AF_OD, GPIO_OSPEED_50MHZ, GPIO_PIN_6 | GPIO_PIN_7);
    /* Initialize the IMU (Notice that MPU6500 is referenced, this is due to the fact that ICM-20600
       ICM-20600 is mostly register compatible with MPU6500, if MPU6500 is used only thing that needs
       to change is MPU6500_WHO_AM_I_ID from 0x11 to 0x70. */
    mpu6500_install(I2C0);

	/* Creates temporary vectors to erase previously drwan lines */
    mpu6500_getAccel(&vec_temp);
    mpu6500_getGyro(&vec2_temp);

	//////////////////////////////////// Initialize Usart //////////////////////////////////////

	/* USART interrupt configuration */
    eclic_global_interrupt_enable();
    eclic_priority_group_set(ECLIC_PRIGROUP_LEVEL3_PRIO1);
    eclic_irq_enable(USART0_IRQn, 1, 0);
		
    /* configure COM0 */
    gd_eval_com_init(EVAL_COM0);                                // Startar hela USART systemet.
	
    
	/* enable USART TBE & RBNE interrupt */  
    usart_interrupt_enable(USART0, USART_INT_TBE);
    usart_interrupt_enable(USART0, USART_INT_RBNE);

    /////////////////////////////////// Initialize Math ///////////////////////////////////////// 

    /*  */



    ////////////////////////// Initialize SD-Card /////////////////////////////////////////
    
    /* Handle for the mounted filesystem */
    FATFS fs;
    
    /* FatFs return code */
    volatile FRESULT fr; 
    
    /* File handle */    
    FIL fil;       

    /* Used for bytes written, and bytes read */         
    UINT bw = 999;
    UINT br = 0;

    /* A string to write to file */
    char buf[128] = "write this to a file\n";

    /* A buffer for storing an image from the SD-card */
    uint16_t image_buffer[20*30] = {0};

    /* For sequencing numbers in loop */
    uint32_t file_no = 0;
    
    /* Sets a valid date for when writing to file */
    set_fattime(2022, 10, 11, 0, 0, 0); //2022 Oct 11th, 00:00:00
    delay_1ms(100);
    
    ////////////////////// Här nedan slutar det fungera med LCD_Show....

    /* This function "mounts" the SD-card which makes the filesystem available */
    fr = f_mount(&fs, "", 1);       //Mount storage device
    f_sync(&fil);                   //
    
    /* This function opens a file. In this case we are creating a file which we want to write to */
    /* Filename should be at most 8 chars long and the extension should be at most 3 */
    fr = f_open(&fil, "TEXT.TXT", FA_WRITE | FA_CREATE_ALWAYS);
    
    /* Write some text to the file */
    for(int i = 0; i < 10; i++){
        fr = f_write(&fil, buf, strlen(buf), &bw);
    } 
    
    delay_1ms(500);
    /* Make sure writes are committed to the file */
    f_sync(&fil); 

    /* Close the file */
    f_close(&fil);      //Close file
    
    delay_1ms(100);

    /* Now we open a file for reading. */
    fr = f_open(&fil, "1.bin", FA_READ);

    /* Read 20x30x2 bytes since the images are 16bit 20x30px. The data is written into "image_buffer" */ 
    fr = f_read(&fil, image_buffer, 20*30*2+4, &br);
    f_close(&fil);

    /* "image_buffer" now contains the image and we just have to display it on the screen */
    LCD_ShowPicture(10, 10, 29, 39, (u8*)image_buffer+4);
    
    delay_1us(10);
    /* The rest follows the same procedure */
    fr = f_open(&fil, "2.bin", FA_READ);
    fr = f_read(&fil, image_buffer, 20*30*2+4, &br);
    f_close(&fil);

    LCD_ShowPicture(30, 10, 49, 39, (u8*)image_buffer+4);
     
    fr = f_open(&fil, "colon.bin", FA_READ);
    fr = f_read(&fil, image_buffer, 20*30*2+4, &br);
    f_close(&fil);

    LCD_ShowPicture(50, 10, 69, 39, (u8*)image_buffer+4);
     
    fr = f_open(&fil, "3.bin", FA_READ);
    fr = f_read(&fil, image_buffer, 20*30*2+4, &br);
    f_close(&fil);

    LCD_ShowPicture(70, 10, 89, 39, (u8*)image_buffer+4);
     
    /* We can also select the file dynamically */
    strcpy(buf, "0.bin");


	/* Infinity while loop to always check gyro/acc & sedn/recive */
    
	while(1) {
        ///////////////////////////////////////////////// Accel & Gyro //////////////////////////////////////////////////////
		
        mpu6500_getGyroAccel(&Acc,&Gyro);
        // Calls on getAccel and getGyro at the same time
        package.aX = Acc.x;
        package.aY = Acc.y;
        package.aZ = Acc.z;
        package.gX = Gyro.x;
        package.gY = Gyro.y;
        package.gZ = Gyro.z;

        /* Skala värdena!!! */

        /////////////////////////////////////////////////// USART ////////////////////////////////////////////////////////////  

        while((txcount < sizeof(package) && rxcount<sizeof(package))) {
            if(RESET != usart_interrupt_flag_get(USART0, USART_INT_FLAG_TBE)){ 
                usart_data_transmit(USART0, bufferstruct[txcount++]);
                //LCD_ShowNum(50,10,txcount,2,BLUE);
                // 
            }
            //delay_1ms(50);
            if(RESET != usart_interrupt_flag_get(USART0, USART_INT_FLAG_RBNE)){ 
                rxbuffer[rxcount++] = usart_data_receive(USART0);
                //LCD_ShowNum(100,10,rxcount,2,YELLOW);
                // 
            }
        }
        txcount =0;
        rxcount=0;

        //float num =  *((float*)buffer);
        /* Print out rxbuffer, the recived information to see that everything is there 
        LCD_ShowNum1(10,10,package2.aX,6,GREEN);
         
        LCD_ShowNum1(90,10,package2.gX,6,GREEN);
         
        LCD_ShowNum1(10,30,package2.aY,6,GREEN);
         
        LCD_ShowNum1(90,30,package2.gY,6,GREEN);
         
        LCD_ShowNum1(10,50,package2.aZ,6,GREEN);
         
        LCD_ShowNum1(90,50,package2.gZ,6,GREEN);
         
        
        delay_1ms(1000);
        LCD_Clear(BLACK);
        */
        /////////////////////////////////////////////////// Math //////////////////////////////////////////////////////////// 
        /*
        StartX = 0; 
        StartY = 0;
        LatestX = package2.aX - StartX;
        LatestY = package2.aY - StartY;
        if(LatestX < 0){
            if(LatestY < 0){
                LCD_Clear(GREEN);
            } else if(LatestY > 0){
                LCD_Clear(RED);
            }
        } else if(LatestX > 0){
            if(LatestY < 0){
                LCD_Clear(YELLOW);
            } else if(LatestY > 0){
                LCD_Clear(BLUE);
            }
        }
        Skriv kod för att navigera i ett 2D rutnät */

        /////////////////////////////////////////////////// SD-Card //////////////////////////////////////////////////////////// 
        

        /* buf[0] will have the value '0' - '9' so the string will loop through "0.bin" -> "1.bin" -> ... -> "9.bin" and so on */
        
        buf[0] = file_no + '0';
        file_no += 1;
        file_no %= 10;

        fr = f_open(&fil, buf, FA_READ);
        fr = f_read(&fil, image_buffer, 20*30*2+4, &br);
        f_close(&fil);

        LCD_ShowPicture(90, 10, 109, 39, (u8*)image_buffer+4);
         
        delay_1ms(1000);
		
    };
}
